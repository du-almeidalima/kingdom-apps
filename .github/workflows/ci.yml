name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: npx nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: npx nx affected -t test --no-cloud

  # Deploy job: runs only on pushes to the main branch and after the `main` job completes
  deploy:
    runs-on: ubuntu-latest
    needs: main
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      - name: Determine affected projects with deploy target
        id: affected
        run: |
          echo "Calculating affected projects with a 'deploy' target..."
          # Use the modern NX command to show affected projects and include only those with a deploy target.
          # Output JSON to a file, but allow the command to succeed even when there are no affected projects.
          npx nx show projects --affected --with-target=deploy --base=origin/main --head=HEAD --json > affected.json || true
          # Robustly parse different possible JSON shapes that nx may emit and produce a space-separated list.
          projects=$(node -e "const fs=require('fs'); const raw = fs.readFileSync('affected.json','utf8') || ''; if(!raw.trim()){console.log(''); process.exit(0);} try{ const j=JSON.parse(raw); let list=[]; if(Array.isArray(j)){ list = j.map(x => typeof x === 'string' ? x : (x.name || x.project || '')); } else if (j && j.projects) { list = j.projects.map(p => typeof p === 'string' ? p : (p.name || p.project || '')); } else if (typeof j === 'object') { list = Object.keys(j); } console.log(list.filter(Boolean).join(' ')); } catch(e){ console.error('failed to parse nx output:', e); console.error(raw); process.exit(0); }")
          echo "projects=$projects" >> $GITHUB_OUTPUT

      - name: Deploy affected projects
        if: steps.affected.outputs.projects != ''
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          NX_FIREBASE_PROJECT_ID: ${{ secrets.NX_FIREBASE_PROJECT_ID }}
          NX_FIREBASE_API_KEY: ${{ secrets.NX_FIREBASE_API_KEY }}
          NX_FIREBASE_APP_ID: ${{ secrets.NX_FIREBASE_APP_ID }}
          NX_FIREBASE_AUTH_DOMAIN: ${{ secrets.NX_FIREBASE_AUTH_DOMAIN }}
          NX_ENV: production
          NX_APP_BASE_URL: ${{ vars.NX_APP_BASE_URL }}
        run: |
          echo "Deploying projects: ${{ steps.affected.outputs.projects }}"
          for proj in ${{ steps.affected.outputs.projects }}; do
            echo "--> Deploying $proj"
            # Run the project's deploy target. Adjust --configuration if needed per-project.
            npx nx run "$proj":deploy --configuration=production
          done
